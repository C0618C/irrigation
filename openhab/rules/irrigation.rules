import org.openhab.core.library.types.*
import org.joda.time.*

rule "Notify about irrigation controller state changes"
when
Item Irrigaten_State changed
then
	sendMail("myemail@example.tld", "Irrigation Controller State change", "Irrigation controller is now " + Irrigaten_State.state.format("%s"))
end

rule "Start irrigations at 3:00"
when
	Time cron "0 0 3 * * ?"
then
	if(Irrigation_Main_Weather.state == ON && Irrigation_Main_Manual.state == ON){
		sendMail("myemail@example.tld", "Irrigation", "Started irrigation")
		var DateTime startTime = now
		var DateTime endTime
		if(true){
			endTime = startTime.plusMinutes(30)
			createTimer(startTime, [| sendCommand(Irrigation_1, ON) ])
			createTimer(endTime, [| sendCommand(Irrigation_1, OFF) ])
			startTime = endTime.plusMinutes(1)
		}

		if(false){
			endTime = startTime.plusMinutes(30)
			createTimer(startTime, [| sendCommand(Irrigation_2, ON) ])
			createTimer(endTime, [| sendCommand(Irrigation_2, OFF) ])
			startTime = endTime.plusMinutes(1)
		}
		
	} else if (Irrigation_Main_Weather.state == OFF){
		sendMail("myemail@example.tld", "Irrigation", "Did not start irrigation")
	} 
end

rule "Disable/enable irrigation based on rain"
when
	Item Rain changed or
	Item Rain_0 changed or
	Item Rain_1 changed
then
	var Number rainThreshold = 1
	var Number rainFutureTodayThreshold = 1
	var Number rainFutureTomorrowThreshold = 2

	var Number rainInLast24Hours = Rain.maximumSince(now.minusHours(24)).state as DecimalType

	var String rainReason = ""
	if(rainInLast24Hours > rainThreshold){
		rainReason = "Rain in the last 24h"	
	} else if( Rain_0.state > rainFutureTodayThreshold || Rain_1.state > rainFutureTomorrowThreshold){
		rainReason = "Rain predicted"
	}
	
	if(rainReason != ""){
		if(Irrigation_Main_Weather.state != OFF){
			logInfo("Irrigation", rainReason)
			postUpdate(Irrigation_Main_Weather, OFF)
		}
	} else {
		if(Irrigation_Main_Weather.state != ON){
			logInfo("Irrigation", "No rain")
			postUpdate(Irrigation_Main_Weather, ON)
		}		
	}
end

